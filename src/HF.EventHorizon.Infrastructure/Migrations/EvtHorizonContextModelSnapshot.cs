// <auto-generated />
using System;
using HF.EventHorizon.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HF.EventHorizon.Infrastructure.Migrations
{
    [DbContext(typeof(EvtHorizonContext))]
    partial class EvtHorizonContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HF.EventHorizon.Core.Entities.BrowsedAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProtocolConnectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolConnectionId");

                    b.ToTable("BrowsedAddresses");
                });

            modelBuilder.Entity("HF.EventHorizon.Core.Entities.DestinationMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProtocolConnectionId")
                        .HasColumnType("int");

                    b.Property<int>("RoutingRuleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolConnectionId");

                    b.HasIndex("RoutingRuleId");

                    b.ToTable("DestinationMaps");
                });

            modelBuilder.Entity("HF.EventHorizon.Core.Entities.ProtocolConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalParametersJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProtocolPluginId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProtocolPluginId");

                    b.ToTable("ProtocolConnections");
                });

            modelBuilder.Entity("HF.EventHorizon.Core.Entities.ProtocolPlugin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PluginDirectoryPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PluginTypesCsv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredParametersCsv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProtocolPlugins");
                });

            modelBuilder.Entity("HF.EventHorizon.Core.Entities.RoutingRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProtocolConnectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolConnectionId");

                    b.ToTable("RoutingRules");
                });

            modelBuilder.Entity("HF.EventHorizon.Core.Entities.BrowsedAddress", b =>
                {
                    b.HasOne("HF.EventHorizon.Core.Entities.ProtocolConnection", "ProtocolConnection")
                        .WithMany()
                        .HasForeignKey("ProtocolConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProtocolConnection");
                });

            modelBuilder.Entity("HF.EventHorizon.Core.Entities.DestinationMap", b =>
                {
                    b.HasOne("HF.EventHorizon.Core.Entities.ProtocolConnection", "ProtocolConnection")
                        .WithMany()
                        .HasForeignKey("ProtocolConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HF.EventHorizon.Core.Entities.RoutingRule", "RoutingRule")
                        .WithMany("DestinationMaps")
                        .HasForeignKey("RoutingRuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProtocolConnection");

                    b.Navigation("RoutingRule");
                });

            modelBuilder.Entity("HF.EventHorizon.Core.Entities.ProtocolConnection", b =>
                {
                    b.HasOne("HF.EventHorizon.Core.Entities.ProtocolPlugin", "ProtocolPlugin")
                        .WithMany()
                        .HasForeignKey("ProtocolPluginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProtocolPlugin");
                });

            modelBuilder.Entity("HF.EventHorizon.Core.Entities.RoutingRule", b =>
                {
                    b.HasOne("HF.EventHorizon.Core.Entities.ProtocolConnection", "ProtocolConnection")
                        .WithMany("RoutingRules")
                        .HasForeignKey("ProtocolConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProtocolConnection");
                });

            modelBuilder.Entity("HF.EventHorizon.Core.Entities.ProtocolConnection", b =>
                {
                    b.Navigation("RoutingRules");
                });

            modelBuilder.Entity("HF.EventHorizon.Core.Entities.RoutingRule", b =>
                {
                    b.Navigation("DestinationMaps");
                });
#pragma warning restore 612, 618
        }
    }
}
